# Use a multi-stage build to reduce image size
FROM golang:1.23-alpine AS builder

WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source code
COPY . .

# Build the application
RUN go build -o main .
RUN ls -l /app

# Create a lean production image
FROM alpine:latest

RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy the pre-built binary from the builder stage
    # Create a non-root user
    RUN addgroup -g 1000 appuser && adduser -u 1000 -G appuser -s /bin/sh -D appuser
    RUN chown -R appuser:appuser /app

COPY --from=builder --chown=appuser:appuser /app/main /app/main
RUN chmod +x /app/main

RUN chown root:root /app/main

# Expose the port the app runs on
EXPOSE 3000

# Command to run the executable
CMD ["/app/main"]

